[{"content":"","date":"29 March 2024","permalink":"/","section":"Home","summary":"","title":"Home"},{"content":"This section contains all my current projects.\n","date":"29 March 2024","permalink":"/projects/","section":"Projects","summary":"This section contains all my current projects.","title":"Projects"},{"content":"\u003c!DOCTYPE html\u003e Quadtree Visualization This page contains webassembly and javascript content, please enable javascript in your browser. ","date":"29 March 2024","permalink":"/projects/quadtree-rs/","section":"Projects","summary":"\u003c!DOCTYPE html\u003e Quadtree Visualization This page contains webassembly and javascript content, please enable javascript in your browser.","title":"quadtree_rs"},{"content":" noprobelm/glipy GLiPy is a Cellular Automaton Game of Life simulation library written in Python Python 7 0 GLiPy # GLiPy is a Cellular Automaton Game of Life simulation library written in Python.\nFeatures # Run simulations from .life, .rle pattern files, or from a remote URL that points to a valid .rle (widely available on LifeWiki) Create simluations from scratch using the classic rules (B3/S23), or define your own birth/survival rules Build entirely new cell and state types from custom rulesets defined by you (see the protocols available in the cell and state modules) Use the built-in renderer to visualize simulations in your terminal emulator Import glipy into your own projects to connect to other front-ends or run your own simulation analysis Planned Features # Add support for additional algorithm types HashLife QuickLife Add a simple GUI application (CLI/TUI support currently available) Using glipy in your project # If you want to create new cell/state rules, extend the existing algorithms driving an automaton\u0026rsquo;s evolution, or use your own rendering tools, you might want to use glipy in your own project.\nThe Cell and CellState Protocol # The Cell and CellState classes (see the cell and state modules) inherit from Protocol to provide maximum flexbility. In other words, you do not need to inerit from these classes, or even import them to your project at all. Simply write your own cell or cell state classes which implement the methods defined in the respective protocol class. The MooreCell and ConwayState classes in each module should be observed as examples on how to do this properly.\nThe Automaton class # The Automaton class is responsible for driving a simluation. It is generic over Cell and CellState, meaning it will accept any class which implements the methods necessary to be considered Cell or CellState as described in the previous section (Of course, this is Python, so Automaton will technically accept anything, but if you don\u0026rsquo;t want your static type checker to yell at you, you should implement properly).\nSee also # I\u0026rsquo;ve implemented some rendering capabilities in a separate project, glipy-cli. glipy-cli will render Conway\u0026rsquo;s Game of Life simulations in your terminal emulator.\n","date":"26 February 2024","permalink":"/projects/glipy/","section":"Projects","summary":"noprobelm/glipy GLiPy is a Cellular Automaton Game of Life simulation library written in Python Python 7 0 GLiPy # GLiPy is a Cellular Automaton Game of Life simulation library written in Python.","title":"glipy"},{"content":" noprobelm/glipy-cli A front end for visualizing Conway\u0026rsquo;s Game of Life simulations using GLiPy Python 0 0 GliPy-cli # GliPy-cli is a command line front-end interface for glipy, a Cellular Automaton Game of Life library written in Python.\nglipy-cli can render any Conway cellular automaton directly to your terminal emulator.\nFeatures # Visualize Conway\u0026rsquo;s Gameo f Life automatons directly from .life, .rle pattern files, or from a remote URL that points to a valid .rle (widely available on LifeWiki) Select any range of hex colors for cell states Command Line Options # Quickly render a random simulation by running glipy-cli in your terminal.\nglip-cli has several command line options\nOption Description \u0026lt;target\u0026gt; [positional; optional] If no target is passed, render a random simulation. Accepts paths to .rle/.life, or remote URL to rle format -r \u0026ndash;refresh-rate Specify a refresh rate (generations/second) -g \u0026ndash;generations The number of generations a simulation should run for (default ∞) -c \u0026ndash;colors Specify colors for dead/alive cells (accepts hex or ANSI color codes) -x \u0026ndash;debug Enter debug mode. This will turn off terminal rendering and provide performance metrics after the simulation is terminated -n \u0026ndash;no-render Do not render the simulation (debug will automatically trigger this) Examples # Random Conway Soup: glipy-cli Gosper Glider Gun: glipy-cli https://conwaylife.com/patterns/gosperglidergun.rle Cloverleaf Interchange hassled by carnival shuttles: glipy-cli https://conwaylife.com/patterns/p12cloverleafhassler.rle Use custom colors from hex codes: glipy-cli https://conwaylife.com/patterns/387p132pattern.rle --colors \u0026quot;#81A1C1 #3B4252\u0026quot; ","date":"26 February 2024","permalink":"/projects/glipy-cli/","section":"Projects","summary":"noprobelm/glipy-cli A front end for visualizing Conway\u0026rsquo;s Game of Life simulations using GLiPy Python 0 0 GliPy-cli # GliPy-cli is a command line front-end interface for glipy, a Cellular Automaton Game of Life library written in Python.","title":"glipy-cli"},{"content":"This section contains all my current projects.\n","date":"26 February 2024","permalink":"/walkthroughs/","section":"Projects","summary":"This section contains all my current projects.","title":"Projects"},{"content":" noprobelm/tempy A simple, visually pleasing weather report in your terminal. Python 168 0 tempy # tempy will render a simple, visually pleasing weather report for current and near-future conditions to your terminal.\ntempy does not require an API key, but you can register one for yourself if you wish. See the section on registering your own API key\nInstallation # pip install git+https://github.com/noprobelm/tempy tempy is also available as tempy-git on the AUR.\nUsage # Use tempy nyc to get the current weather for New York City\nUnits are imperial by default. Specify the unit system you desire with the -u or --units flags: tempy nyc -u metric\nConfiguration # When tempy runs, a skeleton configuration file will be created in $HOME/.config/tempyrc. You can specify location, units, and api_key options in this file to make tempy run on a default set of arguments.\nOPTIONAL: Registering your own API key # By default, tempy makes requests to the https://www.weatherapi.com API endpoint via my proxy server at http://www.noprobelm.dev. This is to prevent you from needing to register your own API key.\nIf you\u0026rsquo;d rather not make requests through my server, you can always register your own key for free in minutes at www.weatherapi.com. Just store your key in $HOME/.config/tempyrc and tempy will take care of the rest.\nLicense # Copyright © 2023 Jeff Barfield.\n","date":"24 February 2024","permalink":"/projects/tempy/","section":"Projects","summary":"noprobelm/tempy A simple, visually pleasing weather report in your terminal.","title":"tempy"},{"content":" noprobelm/filesystem-emulator A completely unecessary filesystem emulator built to solve day 7 of the 2022 \u0026ldquo;Advent of Code\u0026rdquo; puzzle Python 0 0 Filesystem Emulator # This is a completely unnecessarily excessive solution to day 7 of the 2022 Advent of Code puzzle. To solve the puzzle, the participant is expected to create a set of related data (paths and files), along with a small range of details, and perform calculations based on the resulting file system. You could do this by emulating a directed graph and utilizing graph traversal algorithms.\nThen, if you were really feeling in the spirit of the season, you could write a terminal user interface for it.\nInstallation # git clone git@github.com/noprobelm/filesystem-emulator.git \u0026amp;\u0026amp; cd filesystem-emulator\npip install -r requirements.txt\nUsage # python run.py\nScreenshots # Splash screen\nhelp demo\ndu demo\n","date":"23 February 2024","permalink":"/projects/filesystem-emulator/","section":"Projects","summary":"noprobelm/filesystem-emulator A completely unecessary filesystem emulator built to solve day 7 of the 2022 \u0026ldquo;Advent of Code\u0026rdquo; puzzle Python 0 0 Filesystem Emulator # This is a completely unnecessarily excessive solution to day 7 of the 2022 Advent of Code puzzle.","title":"Filesystem Emulator"},{"content":" noprobelm/pytop A resource monitoring utility modeled after htop Python 0 0 Pytop # Pytop is a system resource monitoring utility modeled after htop. This project is currently under development with many features pending implementation.\nScreenshots # ","date":"22 February 2024","permalink":"/projects/pytop/","section":"Projects","summary":"noprobelm/pytop A resource monitoring utility modeled after htop Python 0 0 Pytop # Pytop is a system resource monitoring utility modeled after htop.","title":"pytop"},{"content":" noprobelm/advent-of-code My advent of code solutions. Rust 0 0 README Pending: Find my Advent of Code solutions at the repository listed above.\n","date":"21 February 2024","permalink":"/projects/advent-of-code/","section":"Projects","summary":"noprobelm/advent-of-code My advent of code solutions.","title":"Advent of Code"},{"content":" noprobelm/codewars-solutions My codewars solutions. Python 0 0 README Pending: Find my Codewars solutions at the repository listed above.\n","date":"20 February 2024","permalink":"/projects/codewars-solutions/","section":"Projects","summary":"noprobelm/codewars-solutions My codewars solutions.","title":"Codewars"},{"content":" noprobelm/emacs-noprobelm My emacs configuration Emacs Lisp 0 0 I recently moved away from a literate config managed by config.org to a modularized approach. I have plans to soon detangle my config for the benefit of providing this repository a README.\n","date":"19 February 2024","permalink":"/projects/emacs-config/","section":"Projects","summary":"noprobelm/emacs-noprobelm My emacs configuration Emacs Lisp 0 0 I recently moved away from a literate config managed by config.","title":"Emacs"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]